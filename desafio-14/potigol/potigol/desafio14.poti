min(a, b: Inteiro) = se a > 0 e a < b ou b == 0 então a senão b fim

app(i: Inteiro, p: Lista[Texto], f: (Inteiro, Inteiro) => Texto): Lista[Texto]
  a, b = p[i - 1], p[i + 1]
  v = se a == "E" ou b == "E" entao "E" senao f(a.inteiro, b.inteiro) fim
  p.pegue(i - 2) + (v :: p.descarte(i + 1))
fim

operation(s: Texto) = (x, y: Inteiro) => escolha s
  caso "+" => "{x + y}"
  caso "-" => "{x - y}"
  caso "/" se y == 0 => "E"
  caso "/" => "{x div y}"
  caso "*" => "{x * y}"
  caso "^" => "{(x ^ y).inteiro}"
  caso  _  => "{x + y}"
fim

rec(p: Lista[Texto]): Texto
  i = (p.tamanho - p.inverta.posicao("^") + 1) mod (p.tamanho + 1)
  j = min(p.posição("/"), p.posição("*"))
  k = min(p.posição("+"), p.posição("-"))
  m = se i > 0 entao i senaose j > 0 entao j senao k fim
  se m == 0 entao
    p.cabeca
  senao
    rec(app(m, p, operation(p[m])))
  fim
fim

vazio = [""].cauda

proc(pilha: Lista[Lista[Texto]], token: Texto): Lista[Lista[Texto]] = escolha token
  caso "(" => vazio :: pilha
  caso ")" => ((rec(pilha.cabeca.inverta) :: pilha.cauda.cabeca)) :: pilha.descarte(2)
  caso x   => (x :: pilha.cabeca) :: pilha.cauda
fim

op = "+-*/^() "
tokens(s: Texto) = s.divida_quando((x, y) => op.contem(x) ou op.contem(y)).selecione(_ <> " ")

valida(s: Texto): Logico
  a = tokens(s)
  b = a.zip(a.cauda).mapeie(x =>
    "0123456789".contem(x.primeiro[1]) e "+-*/^".contem(x.segundo[1]) ou
    "+-*/^".contem(x.primeiro[1]) e "0123456789".contem(x.segundo[1]) ou
    "()".contem(x.primeiro[1]) ou "()".contem(x.segundo[1])
  )
  b.injete(verdadeiro)(_ e _) e "0123456789(".contem(a.primeiro[1]) e "0123456789)".contem(a.ultimo[1])
fim

valida2(s: Texto, c: Int): Logico = (s == "" e c == 0) ou (
  (c >= 0 e s.tamanho > 0) e (
    (s.cabeca == '(' e valida2(s.cauda, c + 1)) ou
    (s.cabeca == ')' e valida2(s.cauda, c - 1)) ou
    (nao "()".contem(s.cabeca) e valida2(s.cauda, c))
  )
)

eval(s: Texto): Texto =
  se valida(s) e valida2(s, 0) entao
    a = rec((tokens(s).injete([vazio])(proc)).cabeca.inverta)
    se a == "E" entao "ERR DIVBYZERO" senao a fim
  senao
    "ERR SYNTAX"
  fim

var entrada := leia_texto
enquanto entrada <> None.orNull faca
  escreva eval(entrada)
  entrada := leia_texto
fim
